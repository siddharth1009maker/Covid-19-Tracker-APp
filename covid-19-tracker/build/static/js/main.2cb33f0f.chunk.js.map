{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","isGrey","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor","App","setCountires","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountriesData","name","iso2","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cb33f0f.chunk.js","sourcesContent":["import { Card , CardContent , Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './InfoBox.css';\r\nfunction InfoBox({title ,isRed,isGrey, cases,active , total,...props}) {\r\n    return (\r\n        <Card \r\n        onClick = {props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } ${isGrey && \"infoBox--grey\"}`}>\r\n           <CardContent>\r\n               <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                   {title}\r\n               </Typography>\r\n               <h2 className=\"infoBox__cases\">{cases}</h2>\r\n               <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n           </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {Circle , Popup} from 'react-leaflet';\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.8)\",\r\n      multiplier: 600,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#262626\",\r\n      rgb: \"rgb(38, 38, 38)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data];\r\n    sortedData.sort((a , b) =>{\r\n        if(a.cases>b.cases) {return -1;}\r\n        else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n//draw circles on the map\r\nexport const showDataOnMap = (data , casesType = \"cases\")=>\r\n    data.map((country) =>(\r\n        <Circle \r\n        center = {[country.countryInfo.lat , country.countryInfo.long]}\r\n        fillOpacity = {0.4}\r\n        color = {casesTypeColors[casesType].hex}\r\n        fillColor = {casesTypeColors[casesType].hex}\r\n        radius={\r\n       ( Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier)/1.8 \r\n      }\r\n        >\r\n        <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases:{numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered:{numeral(country.recovered).format(\"0,0\")}{\" \"}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n        </Popup>\r\n        </Circle>\r\n    ));  \r\n","import React from 'react'\r\nimport \"./Map.css\"\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet'\r\nimport { showDataOnMap } from './util'\r\n//We download the react-leaflet version 2.7.0\r\n//center is where the map starts the lat and long , zoom (how far at begining)\r\nfunction Map({countries,casesType , center , zoom}) {\r\n    return (\r\n        <div className = \"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer \r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n            {showDataOnMap(countries , casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './Table.css'\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"table\">\r\n        {countries.map(({country , cases}) =>(\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td><strong>{numeral(cases).format('0,0')}</strong></td>\r\n            </tr>\r\n        ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n        // why -lastDataPoint bcz data is total cases that day, so we need to minus with last\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  // https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {/* <h2>I'm a Graph!</h2> */}\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { Card, FormControl, MenuItem, Select , CardContent} from '@material-ui/core';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport { prettyPrintStat } from './util';\nfunction App() {\n  const [countries , setCountires] = useState([]);\n  const [country , setCountry] = useState(\"worldwide\");\n  const [countryInfo , setCountryInfo] = useState({});\n  const [tableData , setTableData] = useState([]);\n  const [mapCenter , setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom , setMapZoom] = useState(2);\n  const [mapCountries , setMapCountries] = useState([]);\n  const [casesType , setCasesType] = useState(\"cases\");\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response)=>response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    })\n  },[]);\n  useEffect(()=>{\n    const getCountriesData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) =>response.json())\n      .then((data) =>{\n        const countries = data.map((country) =>(\n \n          {\n            name : country.country , \n            value : country.countryInfo.iso2,\n          }\n        ));\n        const sortedData = sortData(data);\n        setCountires(countries);\n        setTableData(sortedData);\n        setMapCountries(data);\n      });\n    };\n    getCountriesData();\n  },[]);\n  const onCountryChange = async (event) =>{\n    const countryCode = event.target.value;\n    const url = countryCode===\"worldwide\"?\"https://disease.sh/v3/covid-19/all\":`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response=>response.json())\n    .then(data =>{\n      setCountry(countryCode);\n      setCountryInfo(data); //All the data from country code entered\n      countryCode === \"worldwide\"\n      ? setMapCenter([34.80746, -40.4796])\n      : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })  \n    //console.log(countryCode);\n  };\n  console.log(countryInfo);\n  console.log(typeof(countryInfo.cases));\n  return (\n    <div className=\"app\">\n    <div className = \"app__left\">\n    <div className=\"app__header\">\n        <h1>COVID - 19 TRACKER</h1>\n        <FormControl className = \"app__dropdown\">\n          <Select\n          variant = \"outlined\"\n          onChange={onCountryChange}\n          value = {country} //it will display the default value when it matches a menuitem value and it showa the text inside tha menuItem tag\n          >\n          <MenuItem value = \"worldwide\">WorldWide</MenuItem>\n            {countries.map((country) =>(\n              <MenuItem value = {country.value}>{country.name}</MenuItem>\n            ))}\n            {/* <MenuItem value = \"worldwide\">WorldWide</MenuItem>\n            <MenuItem value = \"worldwide\">WorldWide</MenuItem>\n            <MenuItem value = \"worldwide\">WorldWide</MenuItem>\n            <MenuItem value = \"worldwide\">WorldWide</MenuItem> */}\n          </Select>\n        </FormControl>\n        </div>\n      <div className = \"app__stats\">\n         <InfoBox isRed active={casesType === \"cases\"} onClick={e=>setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={countryInfo.cases}/>\n         <InfoBox active={casesType === \"recovered\"} onClick={e=>setCasesType(\"recovered\")} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={countryInfo.recovered}/>\n         <InfoBox isGrey active={casesType === \"deaths\"} onClick={e=>setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={countryInfo.deaths}/>\n      </div>\n      <Map\n      casesType = {casesType}\n      countries = {mapCountries}\n      center = {mapCenter}\n      zoom = {mapZoom}\n       />\n    </div>\n    <Card className=\"app__right\">\n    <CardContent>\n      <h3>Live Cases by country</h3>\n      <Table countries={tableData}/>\n      <h3 className=\"app__graphTitle\">WorldWide New {casesType}</h3>\n      <LineGraph className=\"app__graph\" casesType={casesType}/>\n    </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}